#エラトステネスの篩（ふるい）を用いて高速に素数を求めるプログラム
#入力した整数を上限とした素数のリストを作成

#求める素数の上限N
N = int(input("N?:"))
#入力した値が1以下の場合、当てはまる素数はないため、空リストを出力
if N <= 1:
    print([])
elif N == 2:
    print([2])
else:
    #あらかじめ最初の素数である2のみ格納
    prime = [2]
    #3からNまでの奇数のリストを作成(4以上の偶数は全て2で割り切れるため、素数ではない)
    data = list(range(3, N + 1, 2))
    #素数でない数は、1以外の約数をその数の平方根までの整数に持っているため、探索の上限はNの平方根までの整数
    limit = int(N ** 0.5)
    #リスト「prime」に素数を入れていき、その素数で割り切れるものをリスト「data」から削除していく。
    while limit >= data[0]:
        prime.append(data[0])
        data = [i for i in data if i % data[0] != 0]
    print(prime + data)